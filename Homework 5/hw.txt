Anthony Humay
304 731 856
March 13th, 2017
Homework 5

1A) 
                                50

                         20            60

                   10        40            70

                      15    30		65    80

			  25  35	    75
In case it’s unclear: RS means right subtree and LS means left subtree
15(RS of 10)   
30 (LS of 40)	  
65(LS of 70)  
80 (RS of 70)
25(LS of 30)  
35(RS of 30)  
75 (LS of 80)

1B) In-Order: 10 15 20 25 30 35 40 50 60 65 70 75 80
Pre-Order: 50 20 10 15 40 30 25 35 60 70 65 80 75
Post-Order: 15 10 25 35 30 40 20 65 75 80 70 60 50

1C)
30 DELETED
                                50

                         20            60

                   10        40            70

                      15    25		65    80

			      35	    75
THEN 20 DELETED
                                50

                         15            60

                   10        40            70

                          25		65    80

			      35	    75

2A) 
struct Node {	Node * parent;
	Node * left;	Node * right;	int value;};2B) 
(passed in a key and a value)
if the tree is empty
	make a new node with parent and children pointers null
make an incrementing pointer that is set to the head
while incrementing ptr is not null
	if the ptr’s key is equal to the key passed in
		return nullptr because it already exists
		or replace the value of the ptr’s key with the new key and value
	if the ptr’s key is less than the passed in key
		if the ptr’s right subtree is empty
			add the node and set it’s parent to the ptr’s node
		else 
			set the ptr to the right subtree child
			and continue
	if the ptr’s key is greater than the passed in key
		if the ptr’s left subtree is empty
			add the node and set it’s parent to the ptr’s node
		else 
			set the ptr to the left subtree child
			and continue

3A)  
			8		3 		6	     0	  2          4
3B) 
arr[0] = 8
arr[1] = 3
arr[2] = 6
arr[3] = 0
arr[4] = 2
arr[5] = 4

3C) 
arr[0] = 6
arr[1] = 3
arr[2] = 4
arr[3] = 0
arr[4] = 2

4A) O(C + S)
4B) O(logC + S)
4C) O(logC + logS)
4D) O(logS) // unordered map time complexity is O(1)
4E) O(1) // similar to 4D
4F) O(logC + S)
4G) O(S*logS)
4H) O(C*logS)


